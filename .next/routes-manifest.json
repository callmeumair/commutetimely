{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [
    {
      "source": "/(.*)",
      "headers": [
        {
          "key": "X-DNS-Prefetch-Control",
          "value": "on"
        },
        {
          "key": "Strict-Transport-Security",
          "value": "max-age=63072000; includeSubDomains; preload"
        },
        {
          "key": "X-XSS-Protection",
          "value": "1; mode=block"
        },
        {
          "key": "X-Frame-Options",
          "value": "DENY"
        },
        {
          "key": "X-Content-Type-Options",
          "value": "nosniff"
        },
        {
          "key": "Referrer-Policy",
          "value": "origin-when-cross-origin"
        }
      ],
      "regex": "^(?:/(.*))(?:/)?$"
    },
    {
      "source": "/_next/static/(.*)",
      "headers": [
        {
          "key": "Cache-Control",
          "value": "public, max-age=31536000, immutable"
        }
      ],
      "regex": "^/_next/static(?:/(.*))(?:/)?$"
    },
    {
      "source": "/(.*)\\.(jpg|jpeg|gif|png|svg|webp|avif|ico)",
      "headers": [
        {
          "key": "Cache-Control",
          "value": "public, max-age=31536000, immutable"
        }
      ],
      "regex": "^(?:/(.*))\\.(jpg|jpeg|gif|png|svg|webp|avif|ico)(?:/)?$"
    }
  ],
  "rewrites": {
    "beforeFiles": [],
    "afterFiles": [],
    "fallback": []
  },
  "dynamicRoutes": [],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/accessibility",
      "regex": "^/accessibility(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/accessibility(?:/)?$"
    },
    {
      "page": "/blog",
      "regex": "^/blog(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/blog(?:/)?$"
    },
    {
      "page": "/contact",
      "regex": "^/contact(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/contact(?:/)?$"
    },
    {
      "page": "/cookies",
      "regex": "^/cookies(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/cookies(?:/)?$"
    },
    {
      "page": "/faq",
      "regex": "^/faq(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/faq(?:/)?$"
    },
    {
      "page": "/features",
      "regex": "^/features(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/features(?:/)?$"
    },
    {
      "page": "/how-it-works",
      "regex": "^/how\\-it\\-works(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/how\\-it\\-works(?:/)?$"
    },
    {
      "page": "/privacy-policy",
      "regex": "^/privacy\\-policy(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/privacy\\-policy(?:/)?$"
    },
    {
      "page": "/sitemap",
      "regex": "^/sitemap(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/sitemap(?:/)?$"
    },
    {
      "page": "/sitemap.xml",
      "regex": "^/sitemap\\.xml(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/sitemap\\.xml(?:/)?$"
    },
    {
      "page": "/support",
      "regex": "^/support(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/support(?:/)?$"
    },
    {
      "page": "/terms-of-service",
      "regex": "^/terms\\-of\\-service(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/terms\\-of\\-service(?:/)?$"
    },
    {
      "page": "/testimonials",
      "regex": "^/testimonials(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/testimonials(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "RSC",
    "varyHeader": "RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Router-Segment-Prefetch",
    "prefetchHeader": "Next-Router-Prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "Next-Router-Segment-Prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  }
}